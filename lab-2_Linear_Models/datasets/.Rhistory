dat$Tecnic <- as.factor(dat$Tecnic)
dat$Altres_Particip <- as.factor(dat$Altres_Particip)
dat$EnqEnviada <- as.factor(dat$EnqEnviada)
# dc_EnqEnviada  <- create_dictionary(dat$EnqEnviada)
# save(dc_EnqEnviada, file = "dades/dc_EnqEnviada")
load("dades/dc_EnqEnviadaQS")
dat$EnqEnviada <- recode_factor(dc_EnqEnviadaQS, dat$EnqEnviada)
# dc_categoria  <- create_dictionary(dat$Tipus_Servei)
# save(dc_categoria, file = "dades/dc_categoria")
load("dades/dc_categoria")
dat$categoria <- recode_factor(dc_categoria, dat$Tipus_Servei)
# dc_Estat_Proces  <- create_dictionary(dat$Estat_Proces)
# save(dc_Estat_Proces, file = "dades/dc_Estat_Proces")
load("dades/dc_Estat_Proces")
dat$Estat_Proces <- recode_factor(dc_Estat_Proces, dat$Estat_Proces)
##################
##################
### noves variables
##################
#
data_dat_name <- grep("Data", names(dat), value = T)
for( i in seq_along(data_dat_name)){
yearname <- paste0(data_dat_name[i], "_Year")
dat[,yearname]  <-  format(dat[,data_dat_name[i]],"%Y")
quartname <- paste0(data_dat_name[i], "_Qtm")
dat[,quartname]  <-  as.factor(as.yearqtr(dat[,data_dat_name[i]]))
}
# quarters(dat$Data_Inici)
# View(data.frame(dat$Data_Inici,as.yearqtr(dat$Data_Inici), quarters(dat$Data_Inici) ))
##################
# paste(grep("Data", names(dat), value = T), collapse = " - ")
# export2md(createTable(compareGroups(~. -Data_Inici - Data_Alta - Data_prevista_liurament - Data_Final - Data_Fact - Data_Inici_Year - Data_Inici_Qtm - Data_Alta_Year - Data_Alta_Qtm - Data_prevista_liurament_Year - Data_prevista_liurament_Qtm - Data_Final_Year - Data_Final_Qtm - Data_Fact_Year - Data_Fact_Qtm, data = dat)))
View(dat)
colnames(dat)
myDat <- myDat[!is.na(dat$Data_Fact_Qtm),]
myDat <- dat[!is.na(dat$Data_Fact_Qtm),]
myDat <- dat[!is.na(dat$Data_Fact_Qtm),c("ID", "Import", "Data_Fact_Year", "Data_Fact_Qtm")]
View(myDat)
require (rpivotTable)
rpivotTable(myDdat, rows="Data_Fact_Qtm", col="ID", aggregatorName="Count",
vals="Import", rendererName="Heatmap")
myDat <- dat[!is.na(dat$Data_Fact_Qtm),c("ID", "Import", "Data_Fact_Year", "Data_Fact_Qtm")]
rpivotTable(myDat, rows="Data_Fact_Qtm", col="ID", aggregatorName="Count",
vals="Import", rendererName="Heatmap")
rpivotTable(myDat, rows="Data_Fact_Qtm", aggregatorName="Count",
vals="Import", rendererName="Heatmap")
inVHIR <-FALSE
if (inVHIR){
if (!(require(httr))) install.packages("httr")
set_config(
use_proxy(url="conf_www.ir.vhebron.net", port=8081)
)
}
require(devtools)
install_github("uebvhir/installifnot")
datFileName<-"dades/Facturació Estudis Bioinformàtica i Bioestadística.xlsx"
rnw <- grep(".Rnw",list.files(), value = T)
if (length(rnw) != 1) warning("Hay mas de un fichero rnw!")
file.copy(from = rnw, to = gsub(" ","_", paste0("hist/",gsub(".Rnw","",rnw) ,gsub(" ","-",gsub(":",".",Sys.time())),".Rnw")))
name_dict <- "dictionaries.Rda"
if (file.exists(paste0("dades/",name_dict) )) {
file.copy(from = paste0("dades/",name_dict), to = paste0("hist/dict/",gsub(".Rnw","",name_dict) ,gsub(" ","-",gsub(":",".",Sys.time())),".Rda"))
}
require(knitr)
# include this code chunk as-is to set options
opts_chunk$set(ommcent = NA, prompt = TRUE, tidy = FALSE, fig.width = 7, fig.height = 7,echo = FALSE, message = FALSE, warning = FALSE)
Sys.setlocale("LC_TIME", "C")
require(installifnot)
installifnot("xlsx")
installifnot("compareGroups")
installifnot("zoo") # as.yearqtr
installGitifnot("miriammota","mmotaF",force.install = F)
## Install packages for pivotal tables
require (devtools)
install_github("ramnathv/htmlwidgets")
install_github("smartinsightsfromdata/rpivotTable")
# installifnot("downloader")
# download("https://github.com/miriammota/mmotaF/archive/master.tar.gz", "mmotaF.tar.gz")
# file.copy("mmotaF.tar.gz", paste0("hist/packages/mmotaF",Sys.Date(),".tar.gz"), overwrite = TRUE); # file.remove("mmotaF.tar.gz")
# download("https://github.com/uebvhir/anaStatsUEB/archive/master.tar.gz", "anaStatsUEB.tar.gz")
# file.copy("anaStatsUEB.tar.gz", paste0("hist/packages/anaStatsUEB",Sys.Date(),".tar.gz"), overwrite = TRUE); # file.remove("anaStatsUEB.tar.gz")
# install.packages("mmotaF.tar.gz", repos = NULL, type = "source")
library(readxl)
dat <- read_excel(datFileName,
col_types = c("text", "text", "date",
"date", "date", "date", "date", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text"))
dat <- as.data.frame(dat)
## lectura "tradicional" per a comprobacions
dat_comp <- read.xlsx(datFileName, sheetIndex = 1)
##################
### comprobacions
##################
##comprobacio lectura correcta de les dades amb el paquet readxl
data_dat <- grep("Data", names(dat))
for (i in data_dat){
print(dat[is.na(dat[,i]) != is.na(dat_comp[,i]),i])
}
##################
##################
### Canvi nom de variables
##################
dat <- re_name(dat)
names(dat) <- gsub("\n","_", names(dat))
names(dat) <- gsub("QS","", names(dat))
##################
### correccions
##################
## variables numeriques
dat$Import[is.na(as.numeric(as.character(dat$Import)))] # comprobació de que no perdem cap valor
dat$Import <- as.numeric(as.character(dat$Import))
## variables factor
dat$Plataforma <- as.factor(dat$Plataforma)
dat$Tipus_Servei <- as.factor(dat$Tipus_Servei)
dat$Estat_Proces <- as.factor(dat$Estat_Proces)
dat$Institucio <- as.factor(dat$Institucio)
dat$Tipus_Tarifa <- as.factor(dat$Tipus_Tarifa)
dat$Tecnic <- as.factor(dat$Tecnic)
dat$Altres_Particip <- as.factor(dat$Altres_Particip)
dat$EnqEnviada <- as.factor(dat$EnqEnviada)
# dc_EnqEnviada  <- create_dictionary(dat$EnqEnviada)
# save(dc_EnqEnviada, file = "dades/dc_EnqEnviada")
load("dades/dc_EnqEnviadaQS")
dat$EnqEnviada <- recode_factor(dc_EnqEnviadaQS, dat$EnqEnviada)
# dc_categoria  <- create_dictionary(dat$Tipus_Servei)
# save(dc_categoria, file = "dades/dc_categoria")
load("dades/dc_categoria")
dat$categoria <- recode_factor(dc_categoria, dat$Tipus_Servei)
# dc_Estat_Proces  <- create_dictionary(dat$Estat_Proces)
# save(dc_Estat_Proces, file = "dades/dc_Estat_Proces")
load("dades/dc_Estat_Proces")
dat$Estat_Proces <- recode_factor(dc_Estat_Proces, dat$Estat_Proces)
##################
##################
### noves variables
##################
#
data_dat_name <- grep("Data", names(dat), value = T)
for( i in seq_along(data_dat_name)){
yearname <- paste0(data_dat_name[i], "_Year")
dat[,yearname]  <-  format(dat[,data_dat_name[i]],"%Y")
quartname <- paste0(data_dat_name[i], "_Qtm")
dat[,quartname]  <-  as.factor(as.yearqtr(dat[,data_dat_name[i]]))
}
# quarters(dat$Data_Inici)
# View(data.frame(dat$Data_Inici,as.yearqtr(dat$Data_Inici), quarters(dat$Data_Inici) ))
##################
# paste(grep("Data", names(dat), value = T), collapse = " - ")
# export2md(createTable(compareGroups(~. -Data_Inici - Data_Alta - Data_prevista_liurament - Data_Final - Data_Fact - Data_Inici_Year - Data_Inici_Qtm - Data_Alta_Year - Data_Alta_Qtm - Data_prevista_liurament_Year - Data_prevista_liurament_Qtm - Data_Final_Year - Data_Final_Qtm - Data_Fact_Year - Data_Fact_Qtm, data = dat)))
rpivotTable(myDat, rows="Data_Fact_Qtm", aggregatorName="Count",
vals="Import", rendererName="TAble")
myDat <- dat[!is.na(dat$Data_Fact_Qtm),c("ID", "Import", "Data_Fact_Year", "Data_Fact_Qtm")]
require (rpivotTable)
rpivotTable(myDat, rows="Data_Fact_Qtm", aggregatorName="Count",
vals="Import", rendererName="TAble")
myDat <- dat[!is.na(dat$Data_Fact_Qtm),c("ID",  "Data_Fact_Qtm")]
require (rpivotTable)
rpivotTable(myDat, rows="Data_Fact_Qtm", aggregatorName="Count",
vals="Import", rendererName="TAble")
estFact <- dat[!is.na(dat$Data_Fact_Qtm),]
estLliurats <- dat[!is.na(dat$Data_Fact_Qtm),]
myDat <- estLliurats[, c("ID",  "Data_Fact_Qtm")]
require (rpivotTable)
rpivotTable(myDat, rows="Data_Fact_Qtm", aggregatorName="Count",
vals="Import", rendererName="TAble")
colnames(dat)
estLliurats <- dat[!is.na(dat$Data_Final_Qtm),]
myDat <- estLliurats[, c("ID",  "Data_Fact_Qtm")]
require (rpivotTable)
rpivotTable(myDat, rows="Data_Fact_Qtm", aggregatorName="Count",
vals="Import", rendererName="Table")
myDat <- estLliurats[, c("ID",  "Data_Final_Qtm")]
require (rpivotTable)
rpivotTable(myDat, rows="Data_Final_Qtm", aggregatorName="Count",
vals="Import", rendererName="Table")
View(estLliurats)
View(estLliurats)
estLliurats <- dat[!is.na(dat$Data_Final_Qtm) && !(dat$Tipus_Servei %in% c("Consultes")) ,]
sum(dat$Tipus_Servei %in% c("Consultes")))
sum(dat$Tipus_Servei %in% c("Consultes"))
sum(dat$Tipus_Servei %in% c("Consulta"))
estLliurats <- dat[!is.na(dat$Data_Final_Qtm) && !(dat$Tipus_Servei %in% c("Consulta")) ,]
myDat <- estLliurats[, c("ID",  "Data_Final_Qtm")]
require (rpivotTable)
rpivotTable(myDat, rows="Data_Final_Qtm", aggregatorName="Count",
vals="Import", rendererName="Table")
View(estLliurats)
sum(!is.na(dat$Data_Final_Qtm))
sum(!(dat$Tipus_Servei %in% c("Consulta")))
sum(!is.na(dat$Data_Final_Qtm) & !(dat$Tipus_Servei %in% c("Consulta")))
sum(!is.na(dat$Data_Final_Qtm) && !(dat$Tipus_Servei %in% c("Consulta")))
estLliurats <- dat[!is.na(dat$Data_Final_Qtm) & !(dat$Tipus_Servei %in% c("Consulta")) ,]
myDat <- estLliurats[, c("ID",  "Data_Final_Qtm")]
require (rpivotTable)
rpivotTable(myDat, rows="Data_Final_Qtm", aggregatorName="Count",
vals="Import", rendererName="Table")
rpivotTable(myDat, rows="Data_Final_Qtm", aggregatorName="Count",
vals="ID", rendererName="Table")
estFacturats <- estLliurats [!is.na(dat$Data_Fact_Qtm),]
myDat <- estFacturats[, c("ID", "Import", "Data_Fact_Qtm")]
require (rpivotTable)
rpivotTable(myDat, rows="Data_Fact_Qtm", aggregatorName="Sum",
vals="Import", rendererName="Table")
View(estFacturats)
View(estLliurats)
sum(estFacturats$Import)
sum(estFacturats$Import[!is.na(estFacturats$Data_Fact),])
sum(estFacturats$Import[!is.na(estFacturats$Data_Fact)])
sum(estFacturats[!is.na(estFacturats$Data_Fact),"Import"])
sum(estFacturats[!is.na(estFacturats$Data_Fact) & !is.na(estFacturats$Import),"Import"])
library(readr)
muscleMass <- read_delim("~/Dropbox (VHIR)/Classes/Classes-UOC/Assignatura_MU-Regressio/PEC1/2017-19_S1/muscleMass.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(muscleMass)
attach(muscleMass)
plot(MM~Edad)
library(readr)
muscleMass <- read_delim("~/Dropbox (VHIR)/Classes/Classes-UOC/Assignatura_MU-Regressio/PEC1/2017-19_S1/muscleMass.csv",      ";", escape_double = FALSE, trim_ws = TRUE)
muscleMass<- as.matrix(muscleMass)
muscleMass
require(knitr)
# include this code chunk as-is to set options
opts_chunk$set(comment = NA, prompt = TRUE, tidy = FALSE, fig.width = 7, fig.height = 7,echo = TRUE, message = FALSE, warning = FALSE, cache=FALSE)
Sys.setlocale("LC_TIME", "C")
summary (lm1)
library(readr)
muscleMass <- read.delim("muscleMass.csv", sep= ";")
head(muscleMass)
require(ggplot2)
ggplot(muscleMass,
aes(y = MM, x = Edad)) +
geom_point()
lm1 <- lm (MM~Edad, data=muscleMass)
summary (lm1)
require(ggplot2)
ggplot(muscleMass,
aes(y = MM, x = Edad)) +
geom_point()
geom_abline(aes(slope=-1.1900 ,intercept=156.3466,color="red"))
require(ggplot2)
ggplot(muscleMass,
aes(y = MM, x = Edad)) +
geom_point()+
geom_abline(aes(slope=-1.1900 ,intercept=156.3466,color="red"))
? geom_abline
require(ggplot2)
ggplot(muscleMass,
aes(y = MM, x = Edad)) +
geom_point()+
geom_smooth(method = "lm", se = FALSE))
require(ggplot2)
ggplot(muscleMass,
aes(y = MM, x = Edad)) +
geom_point()+
geom_abline(aes(slope=-1.1900 ,intercept=156.3466,color="red"))
coefficients(summary(lm1))
Slope=coefficients(summary(lm1))["Edad","Estimate"]
Slope
Intercept =coefficients(summary(lm1))["(Intercept)","Estimate"]
Slope=coefficients(summary(lm1))["Edad","Estimate"]
Intercept =coefficients(summary(lm1))["(Intercept)","Estimate"]
require(ggplot2)
ggplot(muscleMass,
aes(y = MM, x = Edad)) +
geom_point()+
geom_abline(aes(slope=lope ,intercept=Intercept,color="red"))
Slope=coefficients(summary(lm1))["Edad","Estimate"]
Intercept =coefficients(summary(lm1))["(Intercept)","Estimate"]
require(ggplot2)
ggplot(muscleMass,
aes(y = MM, x = Edad)) +
geom_point()+
geom_abline(aes(slope=Slope ,intercept=Intercept,color="red"))
print(Slope=coefficients(summary(lm1))["Edad","Estimate"])
print(coefficients(summary(lm1))["Edad","Estimate"])
Slope=coefficients(summary(lm1))["Edad","Estimate"]
Intercept =coefficients(summary(lm1))["(Intercept)","Estimate"]
print(Slope*60.5+Intercept)
coefficients(summary(lm1))
coefficients(lm1)
summary(lm1)
names(lm1)
print((summary(lm1)$sigma)^2)
print(coefficients(summary(lm1))["Edad",])
-1.189996e+00/9.019725e-02
-1.189996e+00/8.173
predict (lmmuscle,data.frame(Edad=60), interval="confidence")
predict (lm1, data.frame(Edad=60), interval="confidence")
predict (lm1, data.frame(Edad=60), interval="prediction")
summary(lm1)$"Multiple R-squared"
summary(lm1)
1-summary(lm1)$"r.squared"
print(1-summary(lm1)$"r.squared")
opt <-par(mfrow=c(2,2))
plot(sumary(lm1))
plot(summary(lm1))
plot(lm1)
plot(lm1$residuals)
require(goProfiles)
options(width=60, warn=0, digits=5)
require(goProfiles)
require(goProfiles)
data(prostateIds)
welsh.MF <- basicProfile (welsh01EntrezIDs[1:100], onto="MF", level=2, orgPackage="org.Hs.eg.db")
singh.MF <- basicProfile (singh01EntrezIDs[1:100], onto="MF", level=2, orgPackage="org.Hs.eg.db")
welsh.singh.MF <-mergeProfilesLists(welsh.MF, singh.MF, profNames=c("Welsh", "Singh"))
printProfiles(welsh.singh.MF, percentage=TRUE)
plotProfiles (welsh.MF, aTitle="Welsh (2001). Prostate cancer data")
welsh <- basicProfile (welsh01EntrezIDs[1:100], onto="ANY", level=2, orgPackage="org.Hs.eg.db")
plotProfiles (welsh.singh.MF, percentage=T,aTitle="Welsh vs Singh", legend=T)
compared.welsh.singh.01.MF <- compareGeneLists (welsh01EntrezIDs[1:100], singh01EntrezIDs[1:100], onto="MF", level=2, orgPackage="org.Hs.eg.db")
print(compSummary(compared.welsh.singh.01.MF))
list1 <- welsh01EntrezIDs[1:100]
list2 <- singh01EntrezIDs[1:100]
commProf <- basicProfile(intersect(list1, list2), onto="MF", level=2, orgPackage="org.Hs.eg.db")$MF
fisherGOProfiles(welsh.MF$MF, singh.MF$MF, commProf, method="holm")
data(prostateIds)
expandedWelsh <- expandedProfile(welsh01EntrezIDs[1:100], onto="MF",
level=2, orgPackage="org.Hs.eg.db")
expandedSingh <- expandedProfile(singh01EntrezIDs[1:100], onto="MF",
level=2, orgPackage="org.Hs.eg.db")
commonGenes <- intersect(welsh01EntrezIDs[1:100], singh01EntrezIDs[1:100])
commonExpanded <- expandedProfile(commonGenes, onto="MF", level=2, orgPackage="org.Hs.eg.db")
equivMF <-equivalentGOProfiles (expandedWelsh[['MF']],
qm  = expandedSingh[['MF']],
pqn0= commonExpanded[['MF']])
print(equivSummary(equivMF, decs=5))
sessionInfo()
install.packages("isl")
install.packages("ISL")
install.packages("ISLR")
data(package="ISLR")
data()
data(package = .packages(all.available = TRUE))
require(MASS)
data(Boston)
str(Boston)
library(faraway)
data(denim)
str(denim)
View(denim)
boxplot(waste~supplier, data=denim)
tapply(waste~supplier, mean)
mean(denim$waste)
? tapply
tapply(denim$, denim$supplier, mean)
tapply(denim$waste, denim$supplier, mean)
gens3 <- c("PKIA", "FANCG", "PRKAR1B")
gens1<-gens3[1]
gens2 <- gens3[1:2]
require(annotate)
require(org.Hs.eg.db)
columns(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
(info3<- select(org.Hs.eg.db, keys=gens3,
columns = c("ENTREZID", "SYMBOL","GO"),
keytype="SYMBOL"))
(info3MF <- info3[info3[,"ONTOLOGY"]=="MF",])
printProfiles(basic.MF.1, percentage=FALSE)
require(goProfiles)
(basic.MF.1 <- basicProfile (entrez1, onto="MF", level=2, orgPackage="org.Hs.eg.db"))
require(annotate)
require(org.Hs.eg.db)
columns(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
(info3<- select(org.Hs.eg.db, keys=gens3,
columns = c("ENTREZID", "SYMBOL","GO"),
keytype="SYMBOL"))
(info3MF <- info3[info3[,"ONTOLOGY"]=="MF",])
table(info3$SYMBOL, info3$ONTOLOGY )
(entrez3 <- unique(info3[,"ENTREZID"]))
(entrez1 <- entrez3[1])
(entrez2 <- entrez3[1:2])
graphMF1<-makeGOGraph(entrez3[1],"MF", chip="hgu133plus2.db")
plot(graphMF1, main=paste("PKIA","(5569)","MF Ontology"))
require(GOstats)
(basic.MF.1 <- basicProfile (entrez1, onto="MF", level=2, orgPackage="org.Hs.eg.db"))
printProfiles(basic.MF.1, percentage=FALSE)
printProfiles(basic.MF.2, percentage=FALSE)
library(ISLR)
data("College")
ls()
dim(College)
library(haven)
StudyMuns <- read_sav("~/Dropbox (VHIR)/UEB-compartida/Formacio_VHIR/2017-2018-Master-VHIR/Final_Exercise/StudyMuns.sav")
View(StudyMuns)
set.seed(123456)
indexos<- sample(1:nrow(StudyMuns), 500)
myMuns<- StudyMuns[indexos,]
View(myMuns)
View(StudyMuns)
class(StudyMuns)
class(myMuns)
colnames(myMuns)
labels(myMuns)
myMuns<- as.data.frame(StudyMuns[indexos,])
apply(myMuns,2, class)
myMuns$educacio <-as.factor(myMuns$educacio)
myMuns$mortdos<- as.factor(myMuns$mortdos)
with (myMuns) {
fisher.test (educacio,mortdos)
}
with (myMuns, fisher.test (educacio,mortdos))
with (myMuns, table (educacio,mortdos))
with (myMuns, chisq.test (educacio,mortdos))
FT<-  fisher.test (educacio,mortdos)
with (myMuns, FT<- fisher.test (educacio,mortdos))
FT
myMuns$FT
FT<- fisher.test (myMuns$educacio,myMuns$mortdos)
names(FT)
for (i in 1:10){
indexos<- sample(1:nrow(StudyMuns), 500)
myMuns<- as.data.frame(StudyMuns[indexos,])
apply(myMuns,2, class)
myMuns$educacio <-as.factor(myMuns$educacio)
myMuns$mortdos<- as.factor(myMuns$mortdos)
FT<- fisher.test (myMuns$educacio,myMuns$mortdos)
FT$p.value
}
for (i in 1:10){
indexos<- sample(1:nrow(StudyMuns), 500)
myMuns<- as.data.frame(StudyMuns[indexos,])
apply(myMuns,2, class)
myMuns$educacio <-as.factor(myMuns$educacio)
myMuns$mortdos<- as.factor(myMuns$mortdos)
FT<- fisher.test (myMuns$educacio,myMuns$mortdos)
show(FT$p.value)
}
for (i in 1:10){
indexos<- sample(1:nrow(StudyMuns), 500)
myMuns<- as.data.frame(StudyMuns[indexos,])
apply(myMuns,2, class)
myMuns$educacio <-as.factor(myMuns$educacio)
myMuns$mortdos<- as.factor(myMuns$mortdos)
FT<- chisq.test (myMuns$educacio,myMuns$mortdos)
show(FT$p.value)
}
with (data.frame(StudyMuns), fisher.test (educacio,mortdos))
with (myMuns, chisq.test (educacio,mortdos))
with (data.frame(StudyMuns), fisher.test (educacio,mortdos))
with (myMuns, fisher.test (educacio,mortdos))
with (data.frame(StudyMuns), fisher.test (educacio,mortdos))
with (myMuns, fisher.test (educacio,mortdos))
for (i in 1:10){
indexos<- sample(1:nrow(StudyMuns), 500)
myMuns<- as.data.frame(StudyMuns[indexos,])
apply(myMuns,2, class)
myMuns$educacio <-as.factor(myMuns$educacio)
myMuns$mortdos<- as.factor(myMuns$mortdos)
FT<- chisq.test (myMuns$educacio,myMuns$mortdos)
show(FT$p.value)
}
with (as.data.frame(StudyMuns), fisher.test (educacio,mortdos))
dotplot(myMuns$educacio~ myMuns$mortdos)
dotchart (myMuns$educacio~ myMuns$mortdos)
dotchart (as.integer(myMuns$educacio)~ myMuns$mortdos)
dotchart (as.integer(myMuns$educacio))
dotchart (as.integer(myMuns$educacio), groups=myMuns$mortdos)
kruskal.test (as.integer(myMuns$educacio), groups=myMuns$mortdos)
? kruskal.test
kruskal.test (as.integer(myMuns$educacio), g=myMuns$mortdos)
boxplot (as.integer(myMuns$educacio)~myMuns$mortdos)
require(beeswarm)
beeswarm (as.integer(myMuns$educacio)~myMuns$mortdos)
?? kruskal
require(vcd)
install.packages(vcd)
install.packages("vcd")
require(vcd)
install.packages("RcmdrPlugin.EZR")
library(Rcmdr)
indexos<- sample(1:nrow(StudyMuns), 500)
myMuns<- as.data.frame(StudyMuns[indexos,])
apply(myMuns,2, class)
myMuns$educacioCat <-as.factor(myMuns$educacio)
myMuns$mortdosCat<- as.factor(myMuns$mortdos)
setwd("~/Dropbox (VHIR)/Classes/Analisi_Dades_Omiques/Materials ADO/lab_7-SHAM1_ALL")
setwd("~/Dropbox (VHIR)/SotaCV/Omics_techniques/lab-2_Linear_Models/datasets")
datDirs <- dir()
datDirs
datDirs <- grep(dir(), "dataset")
datDirs <- grep("dataset", dir())
datDirs
fleList<- dir()
datDirs <- grep("dataset", fleList)
fileList<- dir()
datDirs <- grep("dataset", fleList)
dataDirs <- fileList[datDirs]
dataDirs
GEOSETS <- c("GSE18198", "GSE1561", "GSE100924", "GSE68580")
require(GEOquery)
rawData <- getGEO(GEOSETS[i])
i <- 1
rawData <- getGEO(GEOSETS[i])
class(rawData); names(rawData); class(rawData[[1]])
eset <-rawData[[1]]
pData(eset)
colnames(pData(eset))
targets <-pData(eset)[,c("title", "cell line:ch1")]
targets
expresMat <- exprs(eset)
colnames(expresMat)
colnames(expresMat) <- targets$title
dir2Save <- paste(dataDirs[i], GEOSETS[i], sep="/")
dir2Save
dir2Save
save(eset, expressMat, targets, file=paste(dir2Save, "Rda", sep="."))
save(eset, expresMat, targets, file=paste(dir2Save, "Rda", sep="."))
write.csv(targets,file=paste(dir2Save, "txt", sep=".") )
